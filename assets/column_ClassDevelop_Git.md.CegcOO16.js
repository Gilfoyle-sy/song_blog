import{_ as s,c as a,o as i,a4 as t}from"./chunks/framework.i35rQw0I.js";const E=JSON.parse('{"title":"git 相关","description":"","frontmatter":{},"headers":[],"relativePath":"column/ClassDevelop/Git.md","filePath":"column/ClassDevelop/Git.md"}'),n={name:"column/ClassDevelop/Git.md"},e=t(`<h1 id="git-相关" tabindex="-1">git 相关 <a class="header-anchor" href="#git-相关" aria-label="Permalink to &quot;git 相关&quot;">​</a></h1><h2 id="一般-commit-信息使用" tabindex="-1">一般 commit 信息使用 <a class="header-anchor" href="#一般-commit-信息使用" aria-label="Permalink to &quot;一般 commit 信息使用&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[module]-[id]-[feat/fix/style/perf/refactor/revert/]-[subject]</span></span></code></pre></div><h2 id="git-常用指令" tabindex="-1">git 常用指令 <a class="header-anchor" href="#git-常用指令" aria-label="Permalink to &quot;git 常用指令&quot;">​</a></h2><div class="language-cmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git init</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git clone</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git commit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git push</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git branch</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git checkout</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git merge</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git cherry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pick</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git squash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git revert</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git reset</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">status</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git stash</span></span></code></pre></div><h2 id="gitflow" tabindex="-1">gitflow <a class="header-anchor" href="#gitflow" aria-label="Permalink to &quot;gitflow&quot;">​</a></h2><p>GitFlow 是一种 Git 工作流，这个工作流程围绕着 project 的发布(release)定义了一个严格的如何建立分支的模型。它是团队成员遵守的一种代码管理方案。这只是一种建议，在团队合作中，具体项目中要灵活应用，不用可守成规，觉得不合理的地方可以自行修正。</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 分支划分</span></span>
<span class="line"><span>- production</span></span>
<span class="line"><span>- release</span></span>
<span class="line"><span>- develop</span></span>
<span class="line"><span>- feature</span></span>
<span class="line"><span>- hotfix</span></span></code></pre></div><h2 id="githook" tabindex="-1">githook <a class="header-anchor" href="#githook" aria-label="Permalink to &quot;githook&quot;">​</a></h2><p>git 的钩子，在 commit push 等之前后者之后做一些脚本，但是 hooks 不会下载到本地</p><h2 id="husky" tabindex="-1">husky <a class="header-anchor" href="#husky" aria-label="Permalink to &quot;husky&quot;">​</a></h2><ul><li>使用 husky 做钩子控制。使用 lint-staged 检验提交的代码</li></ul>`,12),l=[e];function p(h,o,c,r,k,d){return i(),a("div",null,l)}const u=s(n,[["render",p]]);export{E as __pageData,u as default};
