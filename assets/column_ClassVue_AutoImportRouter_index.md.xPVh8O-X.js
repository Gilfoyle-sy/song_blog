import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.DzXn47Ma.js";const c=JSON.parse('{"title":"自动导入路由","description":"","frontmatter":{},"headers":[],"relativePath":"column/ClassVue/AutoImportRouter/index.md","filePath":"column/ClassVue/AutoImportRouter/index.md"}'),e={name:"column/ClassVue/AutoImportRouter/index.md"},l=n(`<h1 id="自动导入路由" tabindex="-1">自动导入路由 <a class="header-anchor" href="#自动导入路由" aria-label="Permalink to &quot;自动导入路由&quot;">​</a></h1><blockquote><p>通过脚手架提供的 api 自动生成路由配置</p></blockquote><h2 id="核心-api" tabindex="-1">核心 api <a class="header-anchor" href="#核心-api" aria-label="Permalink to &quot;核心 api&quot;">​</a></h2><h3 id="webpack" tabindex="-1">webpack <a class="header-anchor" href="#webpack" aria-label="Permalink to &quot;webpack&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {string}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dir</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 检索目录</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {boolean}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> useSubdir</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 是否检索子文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {reg}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regExp</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 匹配文件的正则表达</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">require.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dir, useSubdir, regExp)</span></span></code></pre></div><blockquote><p>注意: dir 必须是字面量</p></blockquote><h3 id="vite" tabindex="-1">vite <a class="header-anchor" href="#vite" aria-label="Permalink to &quot;vite&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><ul><li>该 api 非 web 标准,仅仅是 vite 提供的导入功能</li><li>内部必须是字面量,即不能存在变量,拼接变量和字符串也是不行</li><li>改 api 本质调用的是 fast-global 库的功能,所以该库的字面量配置支持 vite 使用</li><li>路径必须是相对路径,绝对路径,或者在 alias 内配置过的别名路径</li><li>在 vue 项目中使用的时候, 因为路由配置统一生成,最好避免使用 pramas 形式动态路由, 应该以 query 形式传参, 这样避免在动态生成方法出做过多判断,再加代码不必要的耦合</li><li>在 vue3 版本中 可以将路由的 meta 参数配置在.vue 文件中的 defiendOptions 内,方便读取时拿到, 不需要再新增配置文件</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  meta: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;测试1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    isMenu: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    order: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><ul><li>这种动态路由的形式 可以通过导入文件的后缀名形式,过滤掉不必要的组件导致,仅仅导入页面级别的.vue 文件</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 比如本例子中, 将所有页面级别的.vue文件统一成xxxPage.vue的形式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pageObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../views/MenuList/**/(*)Page.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  eager: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  import: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;default&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="使用案例" tabindex="-1">使用案例 <a class="header-anchor" href="#使用案例" aria-label="Permalink to &quot;使用案例&quot;">​</a></h2><ul><li>将页面级别配置文件移入到.vue 文件</li><li>支持一级二级菜单的路由自动导入</li><li>通过 menu.js 配置一级菜单</li><li>通过页面 xxxPage.vue 内的 defineOptions 配置页面参数</li></ul><p><a href="https://github.com/Gilfoyle-sy/song_auto_import_router" target="_blank" rel="noreferrer">Git</a></p>`,15),t=[l];function p(h,k,r,d,o,E){return a(),i("div",null,t)}const u=s(e,[["render",p]]);export{c as __pageData,u as default};
