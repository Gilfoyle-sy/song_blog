import{_ as a,c as n,o as e,a4 as p}from"./chunks/framework.i35rQw0I.js";const u=JSON.parse('{"title":"npm,yarn,pnpm","description":"","frontmatter":{},"headers":[],"relativePath":"column/ClassDevelop/Npm&Yarn&Pnpm.md","filePath":"column/ClassDevelop/Npm&Yarn&Pnpm.md"}'),r={name:"column/ClassDevelop/Npm&Yarn&Pnpm.md"},l=p('<h1 id="npm-yarn-pnpm" tabindex="-1">npm,yarn,pnpm <a class="header-anchor" href="#npm-yarn-pnpm" aria-label="Permalink to &quot;npm,yarn,pnpm&quot;">​</a></h1><p>本质都是包管理工具</p><blockquote><p>不要在一个项目使用多个包管理工具</p><p>不要在一个项目使用多个包管理工具</p><p>不要在一个项目使用多个包管理工具</p></blockquote><p>避免不可预计的依赖问题</p><h2 id="npm" tabindex="-1">npm <a class="header-anchor" href="#npm" aria-label="Permalink to &quot;npm&quot;">​</a></h2><p>nodejs 默认包管理工具</p><h2 id="yarn" tabindex="-1">yarn <a class="header-anchor" href="#yarn" aria-label="Permalink to &quot;yarn&quot;">​</a></h2><ul><li>Yarn 通过并行安装依赖包，从而比 NPM 更快地完成依赖包的安装。</li><li>Yarn 会生成一个锁定文件（yarn.lock），确保每次安装的依赖包版本是相同的，从而避免了版本不一致的问题。</li><li>Yarn 通过对依赖包的哈希校验，确保安装的依赖包是安全的，并且没有被篡改。</li><li>Yarn 可以在没有网络的情况下运行，从而提高了开发者的灵活性。</li></ul><h2 id="pnpm" tabindex="-1">pnpm <a class="header-anchor" href="#pnpm" aria-label="Permalink to &quot;pnpm&quot;">​</a></h2><ul><li>节约磁盘空间：PNPM 使用硬链接来共享依赖包，因此只需要存储一份依赖包的副本，可以大大节约磁盘空间。</li><li>加速安装：PNPM 可以同时下载和安装多个依赖包，从而加速安装过程。</li><li>更好的稳定性：PNPM 可以在多个项目之间共享依赖包，从而减少了不同版本的包之间的冲突和版本不一致的问题。</li></ul>',10),o=[l];function t(i,m,s,c,_,d){return e(),n("div",null,o)}const P=a(r,[["render",t]]);export{u as __pageData,P as default};
