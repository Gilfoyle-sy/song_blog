import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.i35rQw0I.js";const c=JSON.parse('{"title":"白屏","description":"","frontmatter":{},"headers":[],"relativePath":"column/ClassDevelop/WhiteScreen.md","filePath":"column/ClassDevelop/WhiteScreen.md"}'),l={name:"column/ClassDevelop/WhiteScreen.md"},e=n(`<h1 id="白屏" tabindex="-1">白屏 <a class="header-anchor" href="#白屏" aria-label="Permalink to &quot;白屏&quot;">​</a></h1><p>前端开发或面试中，白屏优化是一个绕不开的话题。 由于网络，代码，机能等因素，导致用户打开页面加载过慢，使用户等待时间过长，降低了体检流畅度，更有可能导致用户的流失。 所以作为前端开发者，我们有必要通过各种解决方案，来降低或者避免白屏的出现，提升用户体验。</p><h2 id="图片" tabindex="-1">图片 <a class="header-anchor" href="#图片" aria-label="Permalink to &quot;图片&quot;">​</a></h2><p>开发过程中，UI 给于我们展示，或者用户上传的图片过大，导致载入对应图片的网站时，需要过多的网络资源加载大图片，因而产生白屏。</p><ol><li>通过 tinypng 等图片压缩软件，对这些静态图片进行压缩，保持视觉上没有影响，但可以极大的降低图片的大小。</li><li>会针对于不同尺寸的设备，加载不同的图片</li><li>用户上传的图片，我们可以通过限制用户上传图片的大小</li><li>通过 image-compressor 等第三方库，对用户上传后的图片进行压缩</li><li>图片懒加载，在用户滚动到可视区域时再加载图片，比如 vue-lazyload 第三方库</li><li>对于一些体积较小的静态图片，可以通过脚手架的配置，将图片转为 base64。webpack 中有 url-loader，vite 中可以配置 assetsInlineLimit</li></ol><h2 id="骨架屏" tabindex="-1">骨架屏 <a class="header-anchor" href="#骨架屏" aria-label="Permalink to &quot;骨架屏&quot;">​</a></h2><p>骨架屏，spin，进度条其实是同一种优化手段，就是提前告知用户页面正在加载资源，避免完全的白屏。但是骨架屏的视觉效果更好，可以提升用户体验，多用于移动端页面。</p><h2 id="文件体积" tabindex="-1">文件体积 <a class="header-anchor" href="#文件体积" aria-label="Permalink to &quot;文件体积&quot;">​</a></h2><p>开启 gzip，降低传输文件体积。需要服务器开启 gzip。</p><ul><li>vite compressPlugin</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// npm i -d vite-plugin-compression</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> compressPlugin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite-plugin-compression&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plugins[</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  compressPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ext: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.gz&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//gz br</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    algorithm: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;gzip&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    deleteOriginFile: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><ul><li>webpack 中 compression-webpack-plugin</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// npm install compression-webpack-plugin --save-dev</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CompressionPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;compression-webpack-plugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CompressionPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      algorithm: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;gzip&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(js</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">css)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 匹配文件名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      threshold: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10240</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 对超过10k的数据压缩</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      deleteOriginalAssets: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不删除源文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      minRatio: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.8</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 压缩比</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="生产环境不需要-map-js" tabindex="-1">生产环境不需要 map.js <a class="header-anchor" href="#生产环境不需要-map-js" aria-label="Permalink to &quot;生产环境不需要 map.js&quot;">​</a></h2><p>map 文件的作用在于：项目打包后，代码都是经过压缩加密的，如果运行时报错，输出的错误信息无法准确得知是哪里的代码报错。也就是说 map 文件相当于是查看源码的一个东西。如果不需要定位问题，并且不想被看到源码，就可以删除 map.js，既可以减少包大小，也可以加密源码。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">productionSourceMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span></code></pre></div><h2 id="第三方库使用外链接" tabindex="-1">第三方库使用外链接 <a class="header-anchor" href="#第三方库使用外链接" aria-label="Permalink to &quot;第三方库使用外链接&quot;">​</a></h2><p>第三方库，比如 lodash 等，可以通过公共外链的形式加载。（注意：外链会存在挂掉的情况）</p><ul><li>vite 中配置 vite-plugin-externals</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// npm install vite-plugin-externals -D</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { viteExternalsPlugin } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite-plugin-externals&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    viteExternalsPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      mnt: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;moment&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><ul><li>webpack 中配置 externals</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureWebpack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  externals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;element-ui&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ELEMENT&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="路由组件的懒加载" tabindex="-1">路由组件的懒加载 <a class="header-anchor" href="#路由组件的懒加载" aria-label="Permalink to &quot;路由组件的懒加载&quot;">​</a></h2><p>讲不通的路由打包到不同文件中，待访问到的时候再进行加载</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./views/DetailPage.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="预加载" tabindex="-1">预加载 <a class="header-anchor" href="#预加载" aria-label="Permalink to &quot;预加载&quot;">​</a></h2><p>通过触发式（鼠标悬停动）来加载即将打开的路由</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/about&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> prefetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;关于我&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="帧渲染" tabindex="-1">帧渲染 <a class="header-anchor" href="#帧渲染" aria-label="Permalink to &quot;帧渲染&quot;">​</a></h2><p>requestAnimationFrame 是一个用于动画效果的 API,它使用浏览器的刷新率来执行回调函数,通常每秒钟执行 60 次。我们可以通过帧渲染来加载一些模块很大的 dom 节点，比如长列表元素。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><blockquote><p><a href="https://www.6hu.cc/archives/234917.html" target="_blank" rel="noreferrer">Vite 打包优化，通过文件，图片，字体压缩优化大小</a></p><p><a href="https://blog.csdn.net/weixin_44786530/article/details/126936033" target="_blank" rel="noreferrer">Vue 首屏加载过慢出现白屏的六种优化方案</a></p><p><a href="https://blog.csdn.net/weixin_42981560/article/details/134725320" target="_blank" rel="noreferrer">requestAnimationFrame 帧渲染</a></p><p><a href="https://www.jb51.net/javascript/3071211hv.htm" target="_blank" rel="noreferrer">一文详解 requestAnimationFrame 请求动画帧</a></p></blockquote>`,32),t=[e];function h(p,k,r,E,d,g){return a(),i("div",null,t)}const y=s(l,[["render",h]]);export{c as __pageData,y as default};
