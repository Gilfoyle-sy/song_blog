import{_ as i,c as l,o as e,a4 as a}from"./chunks/framework.DzXn47Ma.js";const g=JSON.parse('{"title":"vite plugin","description":"","frontmatter":{},"headers":[],"relativePath":"column/ClassVue/VitePlugin/index.md","filePath":"column/ClassVue/VitePlugin/index.md"}'),t={name:"column/ClassVue/VitePlugin/index.md"},s=a(`<h1 id="vite-plugin" tabindex="-1">vite plugin <a class="header-anchor" href="#vite-plugin" aria-label="Permalink to &quot;vite plugin&quot;">​</a></h1><blockquote><p>Vite 插件扩展了设计出色的 Rollup 接口，带有一些 Vite 独有的配置项。因此，你只需要编写一个 Vite 插件，就可以同时为开发环境和生产环境工作。</p></blockquote><p><a href="https://www.rollupjs.com/plugin-development/" target="_blank" rel="noreferrer">roll-up 接口文档</a></p><p><a href="https://cn.vitejs.dev/guide/api-plugin.html" target="_blank" rel="noreferrer">vite-plugin 文档</a></p><p><a href="https://github.com/vitejs/awesome-vite?tab=readme-ov-file#plugins" target="_blank" rel="noreferrer">vite-plugin 项目</a></p><p>比如我们平时经常使用的一些插件,图片压缩,markdown 格式转换,甚至 vite 中使用 vue,都是通过 vite 的 plugin 进行加载的</p><p>plugin 为开发除了提供 rollup 的钩子外,还提供 vite 自身的一些构建钩子函数,方便我们在开发和生产环境中更加定制化的开发项目</p><h2 id="实际开发项目" tabindex="-1">实际开发项目 <a class="header-anchor" href="#实际开发项目" aria-label="Permalink to &quot;实际开发项目&quot;">​</a></h2><p><a href="https://github.com/Gilfoyle-sy/song_vite_plugin_demo" target="_blank" rel="noreferrer">仓库</a></p><ul><li>包含了一个所有钩子的使用和执行顺序的 demo</li><li>封装<a href="/song_blog/column/ClassNode/Prompts/">命令行工具</a>的 plugin</li></ul><h2 id="基本语法" tabindex="-1">基本语法 <a class="header-anchor" href="#基本语法" aria-label="Permalink to &quot;基本语法&quot;">​</a></h2><ul><li>name 即定义该 plugin 的名称,官方指定的 plugins 命名规范是 vite-plugin-xxx, 这个 name 值最终在项目中会用于提示作用</li><li>version 即 plugin 的版本</li><li>emforce 这个自定用于调整钩子在 vite 中的执行顺序 <blockquote><ol><li>alias</li><li>带有 enforce: &#39;pre&#39; 的用户插件</li><li>Vite 核心插件</li><li>没有 enforce 值的用户插件</li><li>Vite 构建用的插件</li><li>带有 enforce: &#39;post&#39; 的用户插件</li><li>Vite 后置构建插件（最小化，manifest，报告）</li></ol></blockquote></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vitePluginDemo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vite-plugin-demo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    version: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1.0.0&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="plugin-的钩子" tabindex="-1">plugin 的钩子 <a class="header-anchor" href="#plugin-的钩子" aria-label="Permalink to &quot;plugin 的钩子&quot;">​</a></h2><blockquote><p>具体的相关钩子描述和处理流程请看上面的官方文档和 github 仓库代码, 这块只做简单的总结</p></blockquote><h3 id="通用钩子-即-rollup-的钩子" tabindex="-1">通用钩子(即 rollup 的钩子) <a class="header-anchor" href="#通用钩子-即-rollup-的钩子" aria-label="Permalink to &quot;通用钩子(即 rollup 的钩子)&quot;">​</a></h3><p>vite 开发服务器会穿件一个插件来调用 rollup 的构建钩子,其功能和参数与其一样</p><ol><li><p>服务启动时有两个钩子会被调用</p><blockquote><ul><li>options(opts) <ul><li>替换或操作传递给 rollup.rollup 的选项对象。返回 null 不会替换任何内容</li></ul></li><li>buildStart(opts) <ul><li>在每个 rollup.rollup 构建上调用。当你需要访问传递给 rollup.rollup() 的选项时，建议使用此钩子, 包含了 options 修改合并过后的配置项</li></ul></li></ul></blockquote></li><li><p>每个传入模块请求时被调用的钩子</p><blockquote><ul><li>resolveId <ul><li>定义一个自定义解析器。解析器可以用于定位第三方依赖项等</li></ul></li><li>load 自定义加载器</li><li>transform 转换单个模块</li></ul></blockquote></li><li><p>服务关闭时调用的钩子</p><blockquote><ul><li>buildEnd</li><li>closeBundle</li></ul></blockquote></li></ol><h3 id="vite-独有钩子" tabindex="-1">vite 独有钩子 <a class="header-anchor" href="#vite-独有钩子" aria-label="Permalink to &quot;vite 独有钩子&quot;">​</a></h3><ol><li><p>config(config, env) config 就是在 vite 启动时的所有配置项,包括 plugins,css,server 等等</p><p>env 就是当前使用的环境 内部有 mode,command</p></li><li><p>configResolved(resolvedConfig) resolvedConfig 就是 config 里合并修改过后,最终被 vite 配置且已经调用的配置项</p></li><li><p>configureServer(server) / configurePreviewServer(server) 是用于配置开发服务器的钩子, 第二个是预览服务器的配置</p></li><li><p>transformIndexHtml(html) 这个钩子的作用就是调用更目录下的 index.html,接受并转换为上下文,开发时给 viteserver,构建时给 rollup 打包</p></li><li><p>handleHotUpdate({ server, modules, timestamp }) 执行自定义 HMR 更新处理</p></li></ol><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://juejin.cn/post/6930878407559348231" target="_blank" rel="noreferrer">vite 插件开发指南</a></p>`,22),n=[s];function o(r,p,u,h,d,c){return e(),l("div",null,n)}const v=i(t,[["render",o]]);export{g as __pageData,v as default};
