import{_ as l,c as e,o as t,a4 as i}from"./chunks/framework.DzXn47Ma.js";const T=JSON.parse('{"title":"RESTful 接口规范","description":"","frontmatter":{},"headers":[],"relativePath":"column/ClassDevelop/RESTful.md","filePath":"column/ClassDevelop/RESTful.md"}'),a={name:"column/ClassDevelop/RESTful.md"},u=i('<h1 id="restful-接口规范" tabindex="-1">RESTful 接口规范 <a class="header-anchor" href="#restful-接口规范" aria-label="Permalink to &quot;RESTful 接口规范&quot;">​</a></h1><p>RESTful 是一种架构的规范与约束、原则，符合这种规范的架构就是 RESTful 架构。只是一种接口架构规范，可以根据实际团队的需求做相应的接口修改</p><ul><li>统一接口规范，减少耦合，简化前后端对接时间，增加开发效率</li><li>分隔符使用-代替_</li><li>路径中统一使用小写字母</li><li>路径中不要带状态字段（create,updata,delete 等），使用 method 方法对应操作</li><li><ul><li>get 查询</li></ul></li><li><ul><li>post 新增</li></ul></li><li><ul><li>put 更新所有属性</li></ul></li><li><ul><li>patch 部分更新</li></ul></li><li><ul><li>delete 删除</li></ul></li></ul><p>这种接口规范在实际工作中遇见的比较少，大多数的项目，时间跨度长，人员更迭，前后端协调制定的工作量等等因素的影响，很难推进一种前后端都满意的接口规范。</p><p>但如果在一个新启动的项目，在开发进度允许的情况下，使用这种标准能大大的提升开发体验和排查问题的速度。</p>',5),o=[u];function s(_,r,c,n,p,d){return t(),e("div",null,o)}const m=l(a,[["render",s]]);export{T as __pageData,m as default};
